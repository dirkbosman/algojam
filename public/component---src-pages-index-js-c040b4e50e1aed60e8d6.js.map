{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["fuseData","IndexPage","originalData","useJamsData","useState","searchTerm","setSearchTerm","results","setResults","useEffect","list","length","map","item","tags","node","frontmatter","join","Fuse","keys","name","weight","includeMatches","search","hasResults","title","md","className","style","width","padding","margin","type","placeholder","backgroundColor","border","borderRadius","value","onChange","e","target","key","id","uid","author","path","date","audio_url","body","html"],"mappings":"2FAAA,4IAUIA,EAAW,GA+FAC,UA9FG,WAChB,IAAMC,EAAeC,cADC,EAEcC,mBAAS,IAAtCC,EAFe,KAEHC,EAFG,OAGQF,mBAAS,IAAhCG,EAHe,KAGNC,EAHM,KAMtBC,qBAAU,WA0FZ,IAcQC,EAvGmB,IAAnBH,EAAQI,SACVH,EAAWN,GAsGTQ,EApGyBR,EAoGbU,KAAI,SAACC,GACrB,OAAO,OAAP,UACKA,EADL,CAEEC,KAAMD,EAAKE,KAAKC,YAAYF,KAAKG,KAAK,UAvGtCjB,EA0GG,IAAIkB,IAAKR,EAnBA,CACdS,KAAM,CACJ,CACEC,KAAM,OACNC,OAAQ,IAEV,CACED,KAAM,QACNC,OAAQ,KAGZC,gBAAgB,OAhGf,CAACpB,EAAaS,OAAS,IAG1BF,qBAAU,WACR,GAAKJ,EAAL,CAIA,IAAME,EAAUP,EAASuB,OAAOlB,GAAYO,KAAI,SAACC,GAAD,OAAUA,EAAKA,QAC/DL,EAAWD,QAJTC,EAAWN,KAKZ,CAACG,IAEJ,IAAMmB,EAAajB,EAAQI,OAAS,EACpC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKc,MAAM,SAEX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,GAAG,KACN,yBACEC,UAAU,mBACVC,MAAO,CACLC,MAAO,OAEPC,QAAS,MACTC,OAAQ,QAGV,2BACEC,KAAK,OACLC,YAAY,WACZL,MAAO,CACLC,MAAO,OACPK,gBAAiB,QACjBJ,QAAS,UACTK,OAAQ,iBACRC,aAAc,MACdL,OAAQ,mBAEVM,MAAOhC,EACPiC,SAAU,SAACC,GAGTjC,EAAciC,EAAEC,OAAOH,WAI7B,6BACGhC,GAAcmB,GACb,yCAAejB,EAAQI,OAAvB,UAEDN,IAAemB,GAAc,mDAEhC,6BACGjB,EAAQK,KAAI,YAAe,IAAZG,EAAW,EAAXA,KACd,OACE,kBAAC,IAAD,CACE0B,IAAK1B,EAAK2B,GACVC,IAAK5B,EAAKC,YAAY2B,IACtBlB,MAAOV,EAAKC,YAAYS,MACxBmB,OAAQ7B,EAAKC,YAAY4B,OACzBC,KAAM9B,EAAKC,YAAY6B,KACvBC,KAAM/B,EAAKC,YAAY8B,KACvBC,UAAWhC,EAAKC,YAAY+B,UAC5BjC,KAAMC,EAAKC,YAAYF,KAEvBkC,KAAMjC,EAAKkC,YAMrB,kBAAC,IAAD,CAAKvB,GAAG,KACN,kBAAC,IAAD","file":"component---src-pages-index-js-c040b4e50e1aed60e8d6.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Fuse from \"fuse.js\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport Post from \"../components/Post\";\nimport { Row, Col } from \"reactstrap\";\nimport Sidebar from \"../components/Sidebar\";\nimport { useJamsData } from \"../hooks/jams\";\nimport StateContextProvider from \"../components/stateContext\";\n\nlet fuseData = [];\nconst IndexPage = () => {\n  const originalData = useJamsData();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [results, setResults] = useState([]);\n\n  // triggered only once if there is some data\n  useEffect(() => {\n    if (results.length === 0) {\n      setResults(originalData);\n      // also prepare the fuse data so that we can search from this data\n      fuseData = prepareFuseData(originalData);\n    }\n  }, [originalData.length > 0]);\n\n  // gets triggered everytime the search is changed\n  useEffect(() => {\n    if (!searchTerm) {\n      setResults(originalData);\n      return;\n    }\n    const results = fuseData.search(searchTerm).map((item) => item.item);\n    setResults(results);\n  }, [searchTerm]);\n\n  const hasResults = results.length > 0;\n  return (\n    <StateContextProvider>\n      <Layout>\n        <SEO title=\"Home\" />\n        {/* <h1>Ready to jam?!</h1> */}\n        <Row>\n          <Col md=\"8\">\n            <div\n              className=\"search-container\"\n              style={{\n                width: \"100%\",\n                // backgroundColor: \"grey\",\n                padding: \"4px\",\n                margin: \"2px\",\n              }}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Search..\"\n                style={{\n                  width: \"100%\",\n                  backgroundColor: \"white\",\n                  padding: \"4px 8px\",\n                  border: \"1px solid grey\",\n                  borderRadius: \"5px\",\n                  margin: \"0px 4px 0px 4px\",\n                }}\n                value={searchTerm}\n                onChange={(e) => {\n                  // setSearchTerm(e.target.value);\n\n                  setSearchTerm(e.target.value);\n                }}\n              />\n            </div>\n            <div>\n              {searchTerm && hasResults && (\n                <strong>Found {results.length} items</strong>\n              )}\n              {searchTerm && !hasResults && <strong>No items found</strong>}\n            </div>\n            <div>\n              {results.map(({ node }) => {\n                return (\n                  <Post\n                    key={node.id}\n                    uid={node.frontmatter.uid}\n                    title={node.frontmatter.title}\n                    author={node.frontmatter.author}\n                    path={node.frontmatter.path}\n                    date={node.frontmatter.date}\n                    audio_url={node.frontmatter.audio_url}\n                    tags={node.frontmatter.tags}\n                    // body={node.excerpt}\n                    body={node.html}\n                  />\n                );\n              })}\n            </div>\n          </Col>\n          <Col md=\"4\">\n            <Sidebar />\n          </Col>\n        </Row>\n      </Layout>\n    </StateContextProvider>\n  );\n};\n\nexport default IndexPage;\n\nfunction prepareFuseData(data) {\n  const options = {\n    keys: [\n      {\n        name: \"tags\",\n        weight: 0.8,\n      },\n      {\n        name: \"title\",\n        weight: 0.6,\n      },\n    ],\n    includeMatches: true,\n  };\n  const list = data.map((item) => {\n    return {\n      ...item,\n      tags: item.node.frontmatter.tags.join(\",\"),\n    };\n  });\n  return new Fuse(list, options);\n}\n"],"sourceRoot":""}