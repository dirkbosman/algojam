{"version":3,"sources":["webpack:///./src/templates/single-post.js"],"names":["postQuery","SinglePost","data","location","post","markdownRemark","frontmatter","useContext","StateContext","bookmarks","handleBookmarks","console","log","pageTitle","title","keywords","tags","description","pathname","className","fluid","image","childImageSharp","date","author","color","style","marginBottom","backgroundColor","find","item","uid","border","margin","size","onClick","makePostRequest","item_id","item_type","dangerouslySetInnerHTML","__html","html","map","tag","key","to","slugify"],"mappings":"4FAAA,mOAuIaA,EAAS,YA4BPC,UAtJI,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACpBC,EAAOF,EAAKG,eAAeC,YADQ,EAEFC,qBAAWC,KAA1CC,EAFiC,EAEjCA,UAAWC,EAFsB,EAEtBA,gBAoCnB,OAjCAC,QAAQC,IAAIH,GAkCV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQI,UAAWT,EAAKU,OACtB,kBAAC,IAAD,CACEA,MAAOV,EAAKU,MACZC,SAAUX,EAAKY,KACfC,YAAab,EAAKa,YAElBC,SAAUf,EAASe,WAErB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,UAAU,iBACVC,MAAOhB,EAAKiB,MAAMC,gBAAgBF,QAEpC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,0BAAMD,UAAU,aAAaf,EAAKmB,MADpC,MACoD,IAClD,0BAAMJ,UAAU,aAAaf,EAAKoB,SAGpC,kBAAC,IAAD,CACEC,MAAM,UACNC,MAAO,CACLC,aAAc,OAEdC,gBACEnB,GAAaA,EAAUoB,MAAK,SAACC,GAAD,OAAUA,EAAKC,MAAQ3B,EAAK2B,OACpD,OACA,UACNN,MAAO,QACPO,OAAQ,iBACRC,OAAQ,WAEVC,KAAK,KACLC,QAAS,WAUPzB,EAAgBN,EAAK2B,IAAK3B,EAAKU,MAAOV,EAAKY,MAC3CoB,YAAgB,wCAAyC,CACvDC,QAASjC,EAAK2B,IAEdO,UAAW7B,EAAUoB,MAAK,SAACC,GAAD,OAAUA,EAAKC,MAAQ3B,EAAK2B,OAClD,aACA,eAIPtB,GAAaA,EAAUoB,MAAK,SAACC,GAAD,OAAUA,EAAKC,MAAQ3B,EAAK2B,OACrD,KACA,MAKN,yBAEEQ,wBAAyB,CAAEC,OAAQtC,EAAKG,eAAeoC,QAEzD,wBAAItB,UAAU,aACXf,EAAKY,KAAK0B,KAAI,SAACC,GAAD,OACb,wBAAIC,IAAKD,GACP,kBAAC,OAAD,CAAME,GAAE,QAAUC,kBAAQH,IACxB,kBAAC,IAAD,CAAOlB,MAAM,WAAWkB,WAOpC,wBAAIxB,UAAU,eAAd","file":"component---src-templates-single-post-js-020ad7d5a3e5e9749134.js","sourcesContent":["import React, { useContext } from \"react\";\nimport Layout from \"../components/layout\";\nimport { graphql, Link } from \"gatsby\";\nimport SEO from \"../components/seo\";\nimport { Button, Badge, Card, CardBody, CardSubtitle } from \"reactstrap\";\nimport Img from \"gatsby-image\";\nimport { slugify } from \"../utils/utilityFunctions\";\n// import { StateContext } from \"../../components/stateContext\";\n// import { makePostRequest } from \"../../utils/common\";\nimport { StateContext } from \"../components/stateContext\";\nimport StateContextProvider from \"../components/stateContext\";\nimport { makePostRequest } from \"../utils/common\";\n\nconst SinglePost = ({ data, location }) => {\n  const post = data.markdownRemark.frontmatter;\n  const { bookmarks, handleBookmarks } = useContext(StateContext);\n\n  // console.log(post);\n  console.log(bookmarks);\n\n  // const TTest = () => {\n  //   return (\n  //     <Button\n  //       color=\"primary\"\n  //       style={{\n  //         marginBottom: \"1rem\",\n  //         // backgroundColor: bookmarks.find((item) => item.uid === post.uid)\n  //         backgroundColor: bookmarks.find((item) => item.uid === post.uid)\n  //           ? \"blue\"\n  //           : \"#8CFACA\",\n  //         color: \"black\",\n  //         border: \"1px solid grey\",\n  //         margin: \"6px 0px\",\n  //       }}\n  //       size=\"sm\"\n  //       onClick={() => {\n  //         handleBookmarks(post.uid, post.title, post.tags);\n  //         makePostRequest(\"http://dojoyo.pythonanywhere.com/mark\", {\n  //           item_id: post.uid,\n  //           // item_type: bookmarks.find((item) => item.uid === post.uid)\n  //           item_type: bookmarks.find((item) => item.uid === post.uid)\n  //             ? \"unbookmark\"\n  //             : \"bookmark\",\n  //         });\n  //       }}\n  //     >\n  //       {bookmarks.find((item) => item.uid === post.uid) ? \"ðŸ”–\" : \"ðŸ’¾\"}\n  //     </Button>\n  //   );\n  // };\n\n  return (\n    <StateContextProvider>\n      <Layout pageTitle={post.title}>\n        <SEO\n          title={post.title}\n          keywords={post.tags}\n          description={post.description}\n          // url={baseUrl}\n          pathname={location.pathname}\n        />\n        <Card>\n          <Img\n            className=\"card-image-top\"\n            fluid={post.image.childImageSharp.fluid}\n          />\n          <CardBody>\n            <CardSubtitle>\n              <span className=\"text-info\">{post.date}</span> by{\" \"}\n              <span className=\"text-info\">{post.author}</span>\n            </CardSubtitle>\n            {/* //// Start of Bookmark //// */}\n            <Button\n              color=\"primary\"\n              style={{\n                marginBottom: \"1rem\",\n                // backgroundColor: bookmarks.find((item) => item.uid === post.uid)\n                backgroundColor:\n                  bookmarks && bookmarks.find((item) => item.uid === post.uid)\n                    ? \"blue\"\n                    : \"#8CFACA\",\n                color: \"black\",\n                border: \"1px solid grey\",\n                margin: \"6px 0px\",\n              }}\n              size=\"sm\"\n              onClick={() => {\n                /////////////////////////////////////////////////////////////////\n\n                //console.log(bookmarks);\n\n                //   if (typeof bookmarks === \"undefined\") {\n                //     return item_type = \"bookmark\";\n                // } return item_type = \"unbookmark\";\n\n                /////////////////////////////////////////////////////////////////\n                handleBookmarks(post.uid, post.title, post.tags);\n                makePostRequest(\"http://dojoyo.pythonanywhere.com/mark\", {\n                  item_id: post.uid,\n                  // item_type: bookmarks.find((item) => item.uid === post.uid)\n                  item_type: bookmarks.find((item) => item.uid === post.uid)\n                    ? \"unbookmark\"\n                    : \"bookmark\",\n                });\n              }}\n            >\n              {bookmarks && bookmarks.find((item) => item.uid === post.uid)\n                ? \"ðŸ”–\"\n                : \"ðŸ’¾\"}\n            </Button>\n\n            {/* //// End of Bookmark //// */}\n\n            <div\n              // Use alternative syntax for dangerouslySetInnerHTML ????\n              dangerouslySetInnerHTML={{ __html: data.markdownRemark.html }}\n            />\n            <ul className=\"post-tags\">\n              {post.tags.map((tag) => (\n                <li key={tag}>\n                  <Link to={`/tag/${slugify(tag)}`}>\n                    <Badge color=\"primary\">{tag}</Badge>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </CardBody>\n        </Card>\n        <h3 className=\"text-center\">Share this post</h3>\n      </Layout>\n    </StateContextProvider>\n  );\n};\n\n// query blogPostBySlug($slug: String!, $imageUrl: String!) {\nexport const postQuery = graphql`\n  query blogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        uid\n        title\n        date(formatString: \"MMM Do YYYY\")\n        author\n        audio_url\n        tags\n        palette\n        image {\n          childImageSharp {\n            fluid(maxWidth: 700) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default SinglePost;\n"],"sourceRoot":""}