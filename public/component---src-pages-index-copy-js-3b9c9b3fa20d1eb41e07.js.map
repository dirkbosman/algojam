{"version":3,"sources":["webpack:///./src/pages/index copy.js"],"names":["IndexQuery","IndexPage","useJamsData","useState","content","setContent","searchTerm","setSearchTerm","fuseData","useEffect","list","map","item","tags","node","frontmatter","join","title","id","Fuse","keys","name","weight","includeMatches","length","md","className","style","width","padding","margin","type","placeholder","backgroundColor","border","borderRadius","onChange","e","target","value","disabled","onClick","term","result","search","console","log","query","render","data","allMarkdownRemark","edges","key","author","path","date","audio_url","body","html"],"mappings":"2FAAA,4IA6HMA,EAAU,YAsBDC,UAzIG,WAAO,IAAD,EACEC,cADF,aAEQC,mBAAS,KAAhCC,EAFe,KAENC,EAFM,OAGcF,mBAAS,IAAtCG,EAHe,KAGHC,EAHG,OAIoBJ,mBAAS,IAC/CK,GALkB,UAKP,IAEfC,qBAAU,WAER,IAaMC,EAAON,EAAQO,KAAI,SAACC,GACxB,MAAO,CACLC,KAAMD,EAAKE,KAAKC,YAAYF,KAAKG,KAAK,KACtCC,MAAOL,EAAKE,KAAKC,YAAYE,MAC7BC,GAAIN,EAAKE,KAAKI,OAGlBV,EAAW,IAAIW,IAAKT,EApBJ,CACdU,KAAM,CACJ,CACEC,KAAM,OACNC,OAAQ,IAEV,CACED,KAAM,QACNC,OAAQ,IAGZC,gBAAgB,MAUjB,CAACnB,EAAQoB,SAQZ,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKP,MAAM,SAEX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKQ,GAAG,KACN,yBACEC,UAAU,mBACVC,MAAO,CACLC,MAAO,OAEPC,QAAS,MACTC,OAAQ,QAGV,2BACEC,KAAK,OACLC,YAAY,WACZL,MAAO,CACLC,MAAO,MACPK,gBAAiB,QACjBJ,QAAS,UACTK,OAAQ,iBACRC,aAAc,MACdL,OAAQ,mBAEVM,SAAU,SAACC,GACT9B,EAAc8B,EAAEC,OAAOC,UAG3B,4BACER,KAAK,SACLS,SAAyB,KAAflC,EACVmC,QAvCK,SAACC,GAEhB,IAAMC,EAASnC,EAASoC,OAAOF,GAC/BG,QAAQC,IAAI,cAAeH,IAqCjBhB,MAAO,CACLE,QAAS,WACTK,OAAQ,iBACRC,aAAc,MACdL,OAAQ,kBACRG,gBAAiB,YATrB,QAeF,kBAAC,cAAD,CACEc,MAAO/C,EACPgD,OAAQ,SAACC,GAEP,OADA5C,EAAW4C,EAAKC,kBAAkBC,OAEhC,6BACG/C,EAAQO,KAAI,gBAAGG,EAAH,EAAGA,KAAH,OACX,kBAAC,IAAD,CACEsC,IAAKtC,EAAKI,GACVD,MAAOH,EAAKC,YAAYE,MACxBoC,OAAQvC,EAAKC,YAAYsC,OACzBC,KAAMxC,EAAKC,YAAYuC,KACvBC,KAAMzC,EAAKC,YAAYwC,KACvBC,UAAW1C,EAAKC,YAAYyC,UAC5B3C,KAAMC,EAAKC,YAAYF,KAEvB4C,KAAM3C,EAAK4C,eAQzB,kBAAC,IAAD,CAAKjC,GAAG,KACN,kBAAC,IAAD","file":"component---src-pages-index-copy-js-3b9c9b3fa20d1eb41e07.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Fuse from \"fuse.js\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { graphql, StaticQuery } from \"gatsby\";\nimport Post from \"../components/Post\";\nimport { Row, Col } from \"reactstrap\";\nimport Sidebar from \"../components/Sidebar\";\nimport { useJamsData } from \"../hooks/jams\";\n\nconst IndexPage = () => {\n  const [data, setData] = useJamsData();\n  const [content, setContent] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResults, setSearchResults] = useState(\"\");\n  let fuseData = [];\n\n  useEffect(() => {\n    // index with fuse\n    const options = {\n      keys: [\n        {\n          name: \"tags\",\n          weight: 0.8,\n        },\n        {\n          name: \"title\",\n          weight: 1,\n        },\n      ],\n      includeMatches: true,\n    };\n    const list = content.map((item) => {\n      return {\n        tags: item.node.frontmatter.tags.join(\",\"),\n        title: item.node.frontmatter.title,\n        id: item.node.id,\n      };\n    });\n    fuseData = new Fuse(list, options);\n  }, [content.length]);\n\n  const doSearch = (term) => {\n    debugger;\n    const result = fuseData.search(term);\n    console.log(\"result :>> \", result);\n  };\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      {/* <h1>Ready to jam?!</h1> */}\n      <Row>\n        <Col md=\"8\">\n          <div\n            className=\"search-container\"\n            style={{\n              width: \"100%\",\n              // backgroundColor: \"grey\",\n              padding: \"4px\",\n              margin: \"2px\",\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Search..\"\n              style={{\n                width: \"80%\",\n                backgroundColor: \"white\",\n                padding: \"4px 8px\",\n                border: \"1px solid grey\",\n                borderRadius: \"5px\",\n                margin: \"0px 4px 0px 4px\",\n              }}\n              onChange={(e) => {\n                setSearchTerm(e.target.value);\n              }}\n            />\n            <button\n              type=\"submit\"\n              disabled={searchTerm === \"\"}\n              onClick={doSearch}\n              style={{\n                padding: \"4px 12px\",\n                border: \"1px solid grey\",\n                borderRadius: \"5px\",\n                margin: \"0px 4px 0px 4px\",\n                backgroundColor: \"#ff00ff\",\n              }}\n            >\n              GO!\n            </button>\n          </div>\n          <StaticQuery\n            query={IndexQuery}\n            render={(data) => {\n              setContent(data.allMarkdownRemark.edges);\n              return (\n                <div>\n                  {content.map(({ node }) => (\n                    <Post\n                      key={node.id}\n                      title={node.frontmatter.title}\n                      author={node.frontmatter.author}\n                      path={node.frontmatter.path}\n                      date={node.frontmatter.date}\n                      audio_url={node.frontmatter.audio_url}\n                      tags={node.frontmatter.tags}\n                      // body={node.excerpt}\n                      body={node.html}\n                    />\n                  ))}\n                </div>\n              );\n            }}\n          />\n        </Col>\n        <Col md=\"4\">\n          <Sidebar />\n        </Col>\n      </Row>\n    </Layout>\n  );\n};\n\nconst IndexQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"YYYY-MM-DD \")\n            author\n            path\n            audio_url\n            tags\n          }\n          excerpt\n          html\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"sourceRoot":""}