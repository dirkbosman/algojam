{"version":3,"sources":["webpack:///./src/templates/single-post.js","webpack:///./src/utils/authors.js"],"names":["postQuery","SinglePost","data","location","post","markdownRemark","frontmatter","useContext","StateContext","bookmarks","handleBookmarks","pageTitle","title","authorImageFluid","file","author","keywords","tags","description","pathname","className","fluid","image","childImageSharp","date","color","style","marginBottom","backgroundColor","find","item","uid","border","margin","size","onClick","makePostRequest","item_id","item_type","dangerouslySetInnerHTML","__html","html","map","tag","key","to","slugify","module","exports","name","imageUrl","bio","facebook","twitter","instagram","google","linkedin"],"mappings":"4FAAA,mOA2GaA,GA3Gb,UA2GsB,cAmCPC,UAhII,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAKpBC,EAAOF,EAAKG,eAAeC,YALQ,EAMJC,qBAAWC,KAA1CC,EANmC,EAMnCA,UAAWC,EANwB,EAMxBA,gBAKjB,OAJKD,IACHA,EAAY,IAIZ,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEE,UAAWP,EAAKQ,MAEhBC,iBAAkBX,EAAKY,MAEvB,kBAAC,IAAD,CACEC,OAAQX,EAAKW,OACbH,MAAOR,EAAKQ,MACZI,SAAUZ,EAAKa,KACfC,YAAad,EAAKc,YAElBC,SAAUhB,EAASgB,WAErB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,UAAU,iBACVC,MAAOjB,EAAKkB,MAAMC,gBAAgBF,QAEpC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,0BAAMD,UAAU,aAAahB,EAAKoB,MADpC,MACoD,IAClD,0BAAMJ,UAAU,aAAahB,EAAKW,SAGpC,kBAAC,IAAD,CACEU,MAAM,UACNC,MAAO,CACLC,aAAc,OACdC,gBAEEnB,EAAUoB,MAAK,SAACC,GAAD,OAAUA,EAAKC,MAAQ3B,EAAK2B,OACvC,OACA,UACNN,MAAO,QACPO,OAAQ,iBACRC,OAAQ,WAEVC,KAAK,KACLC,QAAS,WAIPzB,EAAgBN,EAAK2B,IAAK3B,EAAKQ,MAAOR,EAAKa,MAC3CmB,YAAgB,wCAAyC,CACvDC,QAASjC,EAAK2B,IAEdO,UAAW7B,EAAUoB,MAAK,SAACC,GAAD,OAAUA,EAAKC,MAAQ3B,EAAK2B,OAClD,aACA,eAKPtB,EAAUoB,MAAK,SAACC,GAAD,OAAUA,EAAKC,MAAQ3B,EAAK2B,OAAO,KAAO,MAK5D,yBAEEQ,wBAAyB,CAAEC,OAAQtC,EAAKG,eAAeoC,QAEzD,wBAAIrB,UAAU,aACXhB,EAAKa,KAAKyB,KAAI,SAACC,GAAD,OACb,wBAAIC,IAAKD,GACP,kBAAC,OAAD,CAAME,GAAE,QAAUC,kBAAQH,IACxB,kBAAC,IAAD,CAAOlB,MAAM,WAAWkB,WAOpC,wBAAIvB,UAAU,eAAd,uB,mBC3ER2B,EAAOC,QAzBS,CACd,CACEC,KAAM,SACNC,SAAU,WACVC,IACE,wFACFC,SAAU,4BACVC,QAAS,2BACTC,UAAW,6BACXC,OAAQ,0BACRC,SAAU,6BAEZ,CACEP,KAAM,WACNC,SAAU,WACVC,IACE,sGACFC,SAAU,4BACVC,QAAS,2BACTC,UAAW,6BACXC,OAAQ,0BACRC,SAAU","file":"component---src-templates-single-post-js-5c8c081c9d23ce4207ae.js","sourcesContent":["import React, { useContext } from \"react\";\nimport Layout from \"../components/layout\";\nimport { graphql, Link } from \"gatsby\";\nimport SEO from \"../components/seo\";\nimport { Button, Badge, Card, CardBody, CardSubtitle } from \"reactstrap\";\nimport Img from \"gatsby-image\";\nimport { slugify } from \"../utils/utilityFunctions\";\n// import { StateContext } from \"../../components/stateContext\";\n// import { makePostRequest } from \"../../utils/common\";\nimport { StateContext } from \"../components/stateContext\";\nimport StateContextProvider from \"../components/stateContext\";\nimport { makePostRequest } from \"../utils/common\";\nimport authors from \"../utils/authors\";\n\nconst SinglePost = ({ data, location }) => {\n  // const { bookmarks, handleBookmarks } = useContext(StateContext);\n  // const post = data.markdownRemark.frontmatter;\n  // const author = authors.find((x) => x.name === post.author);\n\n  const post = data.markdownRemark.frontmatter;\n  let { bookmarks, handleBookmarks } = useContext(StateContext);\n  if (!bookmarks) {\n    bookmarks = [];\n  }\n\n  return (\n    <StateContextProvider>\n      <Layout\n        pageTitle={post.title}\n        // postAuthor={author}\n        authorImageFluid={data.file} //data.file.childImageSharp.fluid\n      >\n        <SEO\n          author={post.author}\n          title={post.title}\n          keywords={post.tags}\n          description={post.description}\n          // url={baseUrl}\n          pathname={location.pathname}\n        />\n        <Card>\n          <Img\n            className=\"card-image-top\"\n            fluid={post.image.childImageSharp.fluid}\n          />\n          <CardBody>\n            <CardSubtitle>\n              <span className=\"text-info\">{post.date}</span> by{\" \"}\n              <span className=\"text-info\">{post.author}</span>\n            </CardSubtitle>\n            {/* //// Start of Bookmark //// */}\n            <Button\n              color=\"primary\"\n              style={{\n                marginBottom: \"1rem\",\n                backgroundColor:\n                  // bookmarks && bookmarks.find((item) => item.uid === post.uid)\n                  bookmarks.find((item) => item.uid === post.uid)\n                    ? \"blue\"\n                    : \"#8CFACA\",\n                color: \"black\",\n                border: \"1px solid grey\",\n                margin: \"6px 0px\",\n              }}\n              size=\"sm\"\n              onClick={() => {\n                /////////////////////////////////////////////////////////////////\n                //console.log(bookmarks);\n                /////////////////////////////////////////////////////////////////\n                handleBookmarks(post.uid, post.title, post.tags);\n                makePostRequest(\"http://dojoyo.pythonanywhere.com/mark\", {\n                  item_id: post.uid,\n                  // item_type: bookmarks && bookmarks.find((item) => item.uid === post.uid)\n                  item_type: bookmarks.find((item) => item.uid === post.uid)\n                    ? \"unbookmark\"\n                    : \"bookmark\",\n                });\n              }}\n            >\n              {/* {bookmarks && bookmarks.find((item) => item.uid === post.uid) ? \"ðŸ”–\": \"ðŸ’¾\"} */}\n              {bookmarks.find((item) => item.uid === post.uid) ? \"ðŸ”–\" : \"ðŸ’¾\"}\n            </Button>\n\n            {/* //// End of Bookmark //// */}\n\n            <div\n              // Use alternative syntax for dangerouslySetInnerHTML ????\n              dangerouslySetInnerHTML={{ __html: data.markdownRemark.html }}\n            />\n            <ul className=\"post-tags\">\n              {post.tags.map((tag) => (\n                <li key={tag}>\n                  <Link to={`/tag/${slugify(tag)}`}>\n                    <Badge color=\"primary\">{tag}</Badge>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </CardBody>\n        </Card>\n        <h3 className=\"text-center\">Share this post</h3>\n      </Layout>\n    </StateContextProvider>\n  );\n};\n\n// query blogPostBySlug($slug: String!, $imageUrl: String!) {\nexport const postQuery = graphql`\n  query blogPostBySlug($slug: String!, $imageUrl: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        uid\n        title\n        date(formatString: \"MMM Do YYYY\")\n        author\n        audio_url\n        tags\n        palette\n        image {\n          childImageSharp {\n            fluid(maxWidth: 700) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n    file(relativePath: { eq: $imageUrl }) {\n      childImageSharp {\n        fluid(maxWidth: 300) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n  }\n`;\n\nexport default SinglePost;\n","const authors = [\n  {\n    name: \"Dirk B\",\n    imageUrl: \"john.jpg\",\n    bio:\n      \"John has been a front-end and UI designer fpr over 10 years, he is a brilliant artist\",\n    facebook: \"https://www.facebook.com/\",\n    twitter: \"https://www.twitter.com/\",\n    instagram: \"https://www.instagram.com/\",\n    google: \"https://www.google.com/\",\n    linkedin: \"https://www.linkedin.com/\",\n  },\n  {\n    name: \"Jane Doe\",\n    imageUrl: \"jane.jpg\",\n    bio:\n      \"Jane is a back-end developer, she specializes in security and her favourite stack is the MERN stack\",\n    facebook: \"https://www.facebook.com/\",\n    twitter: \"https://www.twitter.com/\",\n    instagram: \"https://www.instagram.com/\",\n    google: \"https://www.google.com/\",\n    linkedin: \"https://www.linkedin.com/\",\n  },\n];\n\nmodule.exports = authors;\n"],"sourceRoot":""}